/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("com.diffplug.spotless") version "6.25.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
    implementation("com.googlecode.lanterna:lanterna:3.1.3")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "n7.HagiMule.Client.Client"
}

// tasks.named<Test>("test") {
//     // Use JUnit Platform for unit tests.
//     useJUnitPlatform()
// }

tasks.register<JavaExec>("diary") {
    group = "application" // Optional: Organize the task under the "application" group
    description = "Runs the n7.HagiMule.Diary.Diary class."
    mainClass.set("n7.HagiMule.Diary.DiaryImpl") // Use `mainClass.set` for Kotlin DSL
    classpath = sourceSets["main"].runtimeClasspath // Ensure the classpath is set correctly
}

tasks.named<Jar>("jar") {
    from(configurations.runtimeClasspath.get().filter { it.exists() }.map { if (it.isDirectory) it else zipTree(it) })
    manifest {
        attributes(
            "Main-Class" to "n7.HagiMule.Client.Client",
        )
    }
}

configure<com.diffplug.gradle.spotless.SpotlessExtension> {
    format("misc") {
        target("*.md", ".gitignore", "*.xml", "*.gradle")
        trimTrailingWhitespace()
        endWithNewline()
    }
    java {
        importOrder()
        indentWithTabs()
        removeUnusedImports()
        cleanthat()
        formatAnnotations()
        googleJavaFormat().aosp().reflowLongStrings().reorderImports(false)
    }
    kotlinGradle {
        ktlint()
        trimTrailingWhitespace()
        endWithNewline()
    }
}
